/*
Description:

Problem 1 (problem to be solved)

Given two sets of elements, find the sum of all distinct elements from the set. In other words, find the sum of all elements which are present in either of the given set.
Example:
Set 1 : [3, 1, 7, 9], Set 2: [2, 4, 1, 9, 3]
Output: 13 (distinct elements 4, 7, 2 )
Give a solution to this problem, using arrays.
*/


/*
ALGORITHM PART 1: Function to create an array from user input.
ALGORITHM PART 2: Function to check distinct of each of the array1 and array2.
ALGORITHM PART 3: Sum the array distinct elements of array1 and array2.
*/

// ALGORITHM PART 1

// userArray Function Declaration/Creation
FUNCTION userArray(n): ARRAY_OF INTEGER[n]           
VAR
    //declare local variables for function userArray
    i : INTEGER :=0;
    userArray : ARRAY_OF INTEGER[n];                               
BEGIN
    //receive array elements from user using for loop and return userArray
    FOR i FROM 0 TO n-1 STEP 1  DO
        Read(userArray[i]);          
        i = i + 1;
    END_FOR
    RETURN userArray;   
END


// ALGORITHM PART 2: 

//Declaration/creation of check_sum_distinct array.
FUNCTION check_sum_distinct(y, z, array_1, array_2) : INTEGER         
VAR
    // declare local variables for check_sum_distinct array.
    y, z, sum, i, j := INTEGER;
    array_1 : ARRAY_OF INTEGER [y];
    array_2 : ARRAY_OF INTEGER [z];
BEGIN
    // nested loop to compare each element in array 1 to array 2
    FOR i FROM 0 TO y-1 STEP 1  DO                                         
        FOR j FROM 0 TO z-1 STEP 1  DO
            
            //if same item found in both arrays, break out of loop   
            IF (array_1[i] == array_2[j]) THEN                           
                BREAK; 
            END_IF
        END_FOR
        
        // if items not similar, add element to sum of distinct items from array 1
        IF (array_1[i] <> array_2[j]) THEN                 
            sum := sum + array_1[i];
        END_IF
    END_FOR

        // Return sum of distinct
    RETURN sum ;                                        
END


// ALGORITHM PART 3: Sum the array distinct elements of array1 and array2.
ALGORITHM sum_of_distinct
VAR
    array1 : ARRAY_OF INTEGER[20];
    array2 : ARRAY_OF INTEGER[20];
    distinct, distinct1, distinct2, n, a, b = INTEGER :=0;

BEGIN
    // prompt user to enter size of array between 1 and 20
    // if number enter is not between and 20, then continue to prompt user again
    REPEAT
        write ("Enter size of first array between 1 and 20: ");
        Read (a);
    UNTIL (a > 0 AND a <= 20)

    // call the function to get elements of the first array and set it to a variable
    array1 := userArray(a);                                        

     // prompt user to enter size of array between 1 and 20
    // if number enter is not between and 20, then continue to prompt user again
    
    REPEAT
        write ("Enter size of second array:");
        Read (b);
    UNTIL (b > 0 AND b <= 20)
    
    // call the function to get elements of the first array and set it to a variable
    array2 := userArray(b);

    // call the function to check for 
    distinct1 := check_sum_distinct(a, b, array1, array2);
    distinct2 := check_sum_distinct(b, a, array2, array1);
    distinct := distinct1 + distinct2;

    write(distinct);

END